# This script generates and displays a simple scatterplot showing the GPU's
# clock64 readings over a period of time (to help establish the granularity at
# which the timer can be read).  The data is read from timer_results.json,
# generated by test_timer_granularity.cpp.
import json
import matplotlib.pyplot as plot
import numpy

def adjust_time_offsets(a):
    """ Takes an array of numbers and shifts them all downard so that the
    smallest number is 0. """
    smallest = 1e15
    for v in a:
        if v < smallest:
            smallest = v
    for i in range(len(a)):
        a[i] -= smallest

def add_plot_padding(axes):
    """Takes matplotlib axes, and adds some padding so that lines close to
    edges aren't obscured by tickmarks or the plot border."""
    y_limits = axes.get_ybound()
    y_range = y_limits[1] - y_limits[0]
    y_pad = y_range * 0.05
    x_limits = axes.get_xbound()
    x_range = x_limits[1] - x_limits[0]
    x_pad = x_range * 0.05
    axes.set_ylim(y_limits[0] - y_pad, y_limits[1] + y_pad)
    axes.set_xlim(x_limits[0] - x_pad, x_limits[1] + x_pad)
    axes.xaxis.set_ticks(numpy.arange(x_limits[0], x_limits[1] + x_pad,
        x_range / 5.0))
    axes.yaxis.set_ticks(numpy.arange(y_limits[0], y_limits[1] + y_pad,
        y_range / 5.0))

input_data = None
with open("timer_results.json") as f:
    input_data = json.loads(f.read())
adjust_time_offsets(input_data)
x_axis = numpy.arange(len(input_data))
figure = plot.figure()
axes = figure.add_subplot(1, 1, 1)
axes.autoscale(enable=True, axis="both", tight=True)
axes.plot(x_axis, input_data, linestyle="None", marker=".", fillstyle="full",
    markeredgewidth=0.0, ms="4", mfc="k")
add_plot_padding(axes)
axes.set_ylabel("Timer reading (GPU clocks)")
axes.set_xlabel("Iteration")
plot.show()

